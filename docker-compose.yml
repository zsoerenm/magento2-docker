secrets:
  db_password:
    file: ./secrets/db_password.txt
  admin_password:
    file: ./secrets/admin_password.txt
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt
  smtp_password:
    file: ./secrets/smtp_password.txt

services:

  php:
    image: zsoerenm/magento2-php:2.4.7-p3
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
        restart: true
      opensearch:
        condition: service_started
      redis:
        condition: service_started
    volumes:
      - staticdata:/var/www/html/pub/static
      - mediadata:/var/www/html/pub/media
      - configdata:/var/www/html/app/etc
      - ./src:/var/www/html
    secrets:
      - db_password
      - admin_password
      - smtp_password
    environment:
      - DB_HOST=db
      - DB_USER=magento2
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - ADMIN_USER=admin
      - ADMIN_PASSWORD_FILE=/run/secrets/admin_password
      - ADMIN_EMAIL=admin_email_address
      - ADMIN_FIRSTNAME=John
      - ADMIN_LASTNAME=Doe
      - CONFIG__DEFAULT__TRANS_EMAIL__IDENT_GENERAL__NAME=StoreName
      - CONFIG__DEFAULT__TRANS_EMAIL__IDENT_GENERAL__EMAIL=smtp_email_address
      - CONFIG__DEFAULT__SYSTEM__SMTP__TRANSPORT=smtp # sendmail, smtp
      - CONFIG__DEFAULT__SYSTEM__SMTP__HOST=smtp_host
      - CONFIG__DEFAULT__SYSTEM__SMTP__PORT=587
      - CONFIG__DEFAULT__SYSTEM__SMTP__USERNAME=smtp_username
      - CONFIG__DEFAULT__SYSTEM__SMTP__PASSWORD_UNENCRYPTED_FILE=/run/secrets/smtp_password
      - CONFIG__DEFAULT__SYSTEM__SMTP__AUTH=login # none, plain, login
      - CONFIG__DEFAULT__SYSTEM__SMTP__SSL=tls # ssl, tls
      # Set caching application to Varnish (=2) default is 1
      - CONFIG__DEFAULT__SYSTEM__FULL_PAGE_CACHE__CACHING_APPLICATION=2
      - CONFIG__DEFAULT__WEB__SECURE__USE_IN_ADMINHTML=1
      - CONFIG__DEFAULT__WEB__SECURE__USE_IN_FRONTEND=1
      # Firefox and Chrome do not upgrade to https automatically for localhost
      # Hence, create a certificate for a url other than localhost (e.g. magento.local) and
      # add a /etc/hosts entry like
      # 127.0.0.1   magento.local
      - CONFIG__DEFAULT__WEB__SECURE__ENABLE_HSTS=1
      - CONFIG__DEFAULT__WEB__UNSECURE__BASE_URL=/
      - CONFIG__DEFAULT__WEB__SECURE__BASE_URL=/
      - SEARCH_ENGINE=opensearch
      - OPENSEARCH_HOST=opensearch
      - OPENSEARCH_ENABLE_AUTH=true
      - OPENSEARCH_USERNAME=admin
      - OPENSEARCH_PASSWORD=Very5tr0ngPassw0rd
      - CACHE_BACKEND=redis
      - CACHE_BACKEND_REDIS_SERVER=redis
      - CACHE_BACKEND_REDIS_DB=1
      - PAGE_CACHE=redis
      - PAGE_CACHE_REDIS_SERVER=redis
      - PAGE_CACHE_REDIS_DB=2
      - SESSION_SAVE=redis
      - SESSION_SAVE_REDIS_HOST=redis
      - SESSION_SAVE_REDIS_DB=3

  redis:
    image: redis:7.2.7-alpine
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping | grep PONG
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: mariadb:10.6.21
    restart: unless-stopped
    volumes:
      - dbdata:/var/lib/mysql
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    secrets:
      - mysql_root_password
      - mysql_password
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - MYSQL_DATABASE=magento2
      - MYSQL_USER=magento2
      - MYSQL_PASSWORD_FILE=/run/secrets/mysql_password

  # Eventually make this a cluster.
  # See https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker/
  opensearch:
    image: opensearchproject/opensearch:2.19.3
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Very5tr0ngPassw0rd!
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearchdata:/usr/share/opensearch/data

  web:
    image: zsoerenm/magento2-nginx:2.4.7-p3
    restart: unless-stopped
    depends_on:
      - php
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health_check.php"]
      start_period: 5m
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - staticdata:/var/www/html/pub/static:ro
      - mediadata:/var/www/html/pub/media:ro
    environment:
      - BACKEND_HOST=php
      - SERVER_NAME=web

  varnish:
    image: zsoerenm/magento2-varnish:2.4.7-p3
    restart: unless-stopped
    depends_on:
      web:
        condition: service_healthy
    tmpfs:
      - /var/lib/varnish/varnishd:exec
    environment:
      - BACKEND_HOST=web
      - BACKEND_PORT=8080
      - VARNISH_HOST=web

  cron:
    image: zsoerenm/magento2-php:2.4.7-p3
    restart: unless-stopped
    depends_on:
      - php
      - db
    volumes:
      - staticdata:/var/www/html/pub/static
      - mediadata:/var/www/html/pub/media
      - configdata:/var/www/html/app/etc
    entrypoint: "/usr/bin/supercronic /etc/crontab"
  
  securetermination:
    image: caddy:2.10.2-alpine
    restart: unless-stopped
    depends_on:
      - varnish
    healthcheck:
      test: nc -z localhost 80 && nc -z localhost 443
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./certs/cert.pem:/certs/cert.pem:ro
      - ./certs/key.pem:/certs/key.pem:ro
      - ./caddy/conf:/etc/caddy
      - caddy_data:/data
      - caddy_config:/config
      - staticdata:/var/www/html/pub/static:ro
      - mediadata:/var/www/html/pub/media:ro
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"

  composer:
    image: zsoerenm/magento2-composer:2.4.7-p3
    volumes:
      - ./src:/var/www/html
    profiles:
      - tools
  
  autoheal:
    image: willfarrell/autoheal
    restart: unless-stopped
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  dbdata:
  staticdata:
  mediadata:
  configdata:
  opensearchdata:
  caddy_data:
  caddy_config:
